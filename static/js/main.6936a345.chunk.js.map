{"version":3,"sources":["serviceWorker.js","components/counter.jsx","components/counters.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Counter","state","count","whenPressedPlus","setState","whenPressedMinus","type","placeholder","onClick","this","className","getBadgeStyle","formatCount","classes","Component","Counters","counters","id","value","name","fetchedUser","TextInput","newItem","concat","length","console","log","bridge","sendPromise","then","data","catch","error","send","key","data2","getUserProfile","saveResult","getResult","map","counter","selected","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCqCSC,E,2MApDbC,MAAQ,CACNC,MAAO,G,EAGTC,gBAAkB,WAChB,EAAKC,SAAS,CAAEF,MAAO,EAAKD,MAAMC,MAAQ,K,EAG5CG,iBAAmB,WACb,EAAKJ,MAAMC,MAAQ,GAAG,EAAKE,SAAS,CAAEF,MAAO,EAAKD,MAAMC,MAAQ,K,wEAIpE,OACE,6BACE,2BAAOI,KAAK,OAAOC,YAAY,SAC/B,4BACEC,QAASC,KAAKJ,iBACdK,UAAU,4BAFZ,KAMA,4BACEF,QAASC,KAAKN,gBACdO,UAAU,4BAFZ,KAMA,0BAAMA,UAAWD,KAAKE,iBAAkBF,KAAKG,kB,sCAMjD,IAAIC,EAAU,mBAMd,OALyB,IAArBJ,KAAKR,MAAMC,MACbW,GAAW,UAEXA,GAAW,UAENA,I,oCAIP,OAAyB,IAArBJ,KAAKR,MAAMC,MACN,OAEAO,KAAKR,MAAMC,U,GAhDFY,a,gBCkFPC,E,2MA/Ebd,MAAQ,CACNe,SAAU,CAAC,CAAEC,GAAI,EAAGC,MAAO,EAAGC,KAAM,KACpCC,YAAa,KACbC,UAAW,Q,EAiCbC,QAAU,WAER,EAAKlB,SAAS,CACZY,SAAU,EAAKf,MAAMe,SAASO,OAAO,CACnCN,GAAI,EAAKhB,MAAMe,SAASQ,OAAS,EACjCN,MAAO,MAGXO,QAAQC,IAAI,EAAKzB,MAAMe,W,gFArCvBW,IACGC,YAAY,uBACZC,MAAK,SAAAC,GAEJL,QAAQC,IAAII,EAAKb,OAElBc,OAAM,SAAAC,S,mCAMTL,IAAOM,KAAK,qBAAsB,CAChCC,IAAK,QACLhB,MAAOT,KAAKY,UAAUH,U,kCAIxBS,IACGC,YAAY,qBAAsB,CAAEM,IAAK,UACzCL,MAAK,SAAAM,GAEJV,QAAQC,IAAIS,EAAMlB,OAEnBc,OAAM,SAAAC,S,+BAiBT,OACE,6BACE,4BAAQxB,QAASC,KAAKa,QAASZ,UAAU,0BAAzC,OAGA,4BACEF,QAASC,KAAK2B,eACd1B,UAAU,0BAFZ,cAMA,2BACEJ,KAAK,OACLC,YAAY,OAEZW,MAAOT,KAAKR,MAAMoB,YAEpB,4BAAQb,QAASC,KAAK4B,WAAY3B,UAAU,0BAA5C,QAGA,4BAAQF,QAASC,KAAK6B,UAAW5B,UAAU,0BAA3C,QAGCD,KAAKR,MAAMe,SAASuB,KAAI,SAAAC,GAAO,OAC9B,kBAAC,EAAD,CAASN,IAAKM,EAAQvB,GAAIC,MAAOsB,EAAQtB,MAAOuB,UAAU,Y,GAzE7C3B,aCKvBa,IAAOM,KAAK,eAAgB,IAC5BS,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SHyHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAC,GACLP,QAAQO,MAAMA,EAAMmB,a","file":"static/js/main.6936a345.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  state = {\n    count: 0\n  };\n\n  whenPressedPlus = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  whenPressedMinus = () => {\n    if (this.state.count > 0) this.setState({ count: this.state.count - 1 });\n  };\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" placeholder=\"item\" />\n        <button\n          onClick={this.whenPressedMinus}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          -\n        </button>\n        <button\n          onClick={this.whenPressedPlus}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          +\n        </button>\n        <span className={this.getBadgeStyle()}>{this.formatCount()}</span>\n      </div>\n    );\n  }\n\n  getBadgeStyle() {\n    let classes = \"badge m-2 badge-\";\n    if (this.state.count === 0) {\n      classes += \"warning\";\n    } else {\n      classes += \"primary\";\n    }\n    return classes;\n  }\n\n  formatCount() {\n    if (this.state.count === 0) {\n      return \"Zero\";\n    } else {\n      return this.state.count;\n    }\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\nimport bridge from \"@vkontakte/vk-bridge\";\n\nclass Counters extends Component {\n  state = {\n    counters: [{ id: 1, value: 0, name: \"\" }],\n    fetchedUser: null,\n    TextInput: \"test\"\n  };\n\n  getUserProfile() {\n    bridge\n      .sendPromise(\"VKWebAppGetUserInfo\")\n      .then(data => {\n        // Обработка события в случае успеха\n        console.log(data.id);\n      })\n      .catch(error => {\n        // Обработка события в случае ошибки\n      });\n  }\n\n  saveResult() {\n    bridge.send(\"VKWebAppStorageSet\", {\n      key: \"test1\",\n      value: this.TextInput.value\n    });\n  }\n  getResult() {\n    bridge\n      .sendPromise(\"VKWebAppStorageGet\", { key: \"test1\" })\n      .then(data2 => {\n        // Обработка события в случае успеха\n        console.log(data2.id);\n      })\n      .catch(error => {\n        // Обработка события в случае ошибки\n      });\n  }\n\n  newItem = () => {\n    // this.setState({ counters: this.state.counters.length + 1 });\n    this.setState({\n      counters: this.state.counters.concat({\n        id: this.state.counters.length + 1,\n        value: 0\n      })\n    });\n    console.log(this.state.counters);\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.newItem} className=\"btn btn-primary btn-sm\">\n          Add\n        </button>\n        <button\n          onClick={this.getUserProfile}\n          className=\"btn btn-primary btn-sm\"\n        >\n          GetProfile\n        </button>\n        <input\n          type=\"text\"\n          placeholder=\"Text\"\n          //ref={this.state.TextInput}\n          value={this.state.TextInput}\n        />\n        <button onClick={this.saveResult} className=\"btn btn-primary btn-sm\">\n          Save\n        </button>\n        <button onClick={this.getResult} className=\"btn btn-primary btn-sm\">\n          Load\n        </button>\n        {this.state.counters.map(counter => (\n          <Counter key={counter.id} value={counter.value} selected={true} />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n//import App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Counters from \"./components/counters\";\nimport bridge from \"@vkontakte/vk-bridge\";\n\nbridge.send(\"VKWebAppInit\", {});\nReactDOM.render(<Counters />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}